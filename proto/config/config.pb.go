// Code generated by protoc-gen-go.
// source: github.com/micro/config-srv/proto/config/config.proto
// DO NOT EDIT!

/*
Package config is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/config-srv/proto/config/config.proto

It has these top-level messages:
	Change
	ChangeLog
	CreateRequest
	CreateResponse
	UpdateRequest
	UpdateResponse
	DeleteRequest
	DeleteResponse
	ReadRequest
	ReadResponse
	SearchRequest
	SearchResponse
	ReadLogRequest
	ReadLogResponse
*/
package config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import config1 "github.com/micro/go-platform/config/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Change struct {
	Id        string             `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Path      string             `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Author    string             `protobuf:"bytes,3,opt,name=author" json:"author,omitempty"`
	Comment   string             `protobuf:"bytes,4,opt,name=comment" json:"comment,omitempty"`
	Timestamp int64              `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
	Set       *config1.ChangeSet `protobuf:"bytes,6,opt,name=set" json:"set,omitempty"`
}

func (m *Change) Reset()                    { *m = Change{} }
func (m *Change) String() string            { return proto.CompactTextString(m) }
func (*Change) ProtoMessage()               {}
func (*Change) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Change) GetSet() *config1.ChangeSet {
	if m != nil {
		return m.Set
	}
	return nil
}

type ChangeLog struct {
	Action string  `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	Change *Change `protobuf:"bytes,2,opt,name=change" json:"change,omitempty"`
}

func (m *ChangeLog) Reset()                    { *m = ChangeLog{} }
func (m *ChangeLog) String() string            { return proto.CompactTextString(m) }
func (*ChangeLog) ProtoMessage()               {}
func (*ChangeLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ChangeLog) GetChange() *Change {
	if m != nil {
		return m.Change
	}
	return nil
}

type CreateRequest struct {
	Change *Change `protobuf:"bytes,1,opt,name=change" json:"change,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateRequest) GetChange() *Change {
	if m != nil {
		return m.Change
	}
	return nil
}

type CreateResponse struct {
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type UpdateRequest struct {
	Change *Change `protobuf:"bytes,1,opt,name=change" json:"change,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateRequest) GetChange() *Change {
	if m != nil {
		return m.Change
	}
	return nil
}

type UpdateResponse struct {
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type DeleteRequest struct {
	Change *Change `protobuf:"bytes,1,opt,name=change" json:"change,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DeleteRequest) GetChange() *Change {
	if m != nil {
		return m.Change
	}
	return nil
}

type DeleteResponse struct {
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type ReadRequest struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type ReadResponse struct {
	Change *Change `protobuf:"bytes,1,opt,name=change" json:"change,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ReadResponse) GetChange() *Change {
	if m != nil {
		return m.Change
	}
	return nil
}

type SearchRequest struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Author string `protobuf:"bytes,2,opt,name=author" json:"author,omitempty"`
	Limit  int64  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type SearchResponse struct {
	Changes []*Change `protobuf:"bytes,1,rep,name=changes" json:"changes,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SearchResponse) GetChanges() []*Change {
	if m != nil {
		return m.Changes
	}
	return nil
}

type ReadLogRequest struct {
	// from unix timestamp
	From int64 `protobuf:"varint,1,opt,name=from" json:"from,omitempty"`
	// to unix timestamp
	To int64 `protobuf:"varint,2,opt,name=to" json:"to,omitempty"`
	// limit number items
	Limit int64 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	// the offset
	Offset int64 `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
}

func (m *ReadLogRequest) Reset()                    { *m = ReadLogRequest{} }
func (m *ReadLogRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadLogRequest) ProtoMessage()               {}
func (*ReadLogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type ReadLogResponse struct {
	Changes []*ChangeLog `protobuf:"bytes,1,rep,name=changes" json:"changes,omitempty"`
}

func (m *ReadLogResponse) Reset()                    { *m = ReadLogResponse{} }
func (m *ReadLogResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadLogResponse) ProtoMessage()               {}
func (*ReadLogResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ReadLogResponse) GetChanges() []*ChangeLog {
	if m != nil {
		return m.Changes
	}
	return nil
}

func init() {
	proto.RegisterType((*Change)(nil), "Change")
	proto.RegisterType((*ChangeLog)(nil), "ChangeLog")
	proto.RegisterType((*CreateRequest)(nil), "CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "CreateResponse")
	proto.RegisterType((*UpdateRequest)(nil), "UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "UpdateResponse")
	proto.RegisterType((*DeleteRequest)(nil), "DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "DeleteResponse")
	proto.RegisterType((*ReadRequest)(nil), "ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "ReadResponse")
	proto.RegisterType((*SearchRequest)(nil), "SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "SearchResponse")
	proto.RegisterType((*ReadLogRequest)(nil), "ReadLogRequest")
	proto.RegisterType((*ReadLogResponse)(nil), "ReadLogResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Config service

type ConfigClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error)
	ReadLog(ctx context.Context, in *ReadLogRequest, opts ...client.CallOption) (*ReadLogResponse, error)
}

type configClient struct {
	c           client.Client
	serviceName string
}

func NewConfigClient(serviceName string, c client.Client) ConfigClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "config"
	}
	return &configClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *configClient) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Config.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Config.Update", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Config.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Config.Search", in)
	out := new(SearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Config.Read", in)
	out := new(ReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ReadLog(ctx context.Context, in *ReadLogRequest, opts ...client.CallOption) (*ReadLogResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Config.ReadLog", in)
	out := new(ReadLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Config service

type ConfigHandler interface {
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Update(context.Context, *UpdateRequest, *UpdateResponse) error
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
	Search(context.Context, *SearchRequest, *SearchResponse) error
	Read(context.Context, *ReadRequest, *ReadResponse) error
	ReadLog(context.Context, *ReadLogRequest, *ReadLogResponse) error
}

func RegisterConfigHandler(s server.Server, hdlr ConfigHandler) {
	s.Handle(s.NewHandler(&Config{hdlr}))
}

type Config struct {
	ConfigHandler
}

func (h *Config) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.ConfigHandler.Create(ctx, in, out)
}

func (h *Config) Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.ConfigHandler.Update(ctx, in, out)
}

func (h *Config) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.ConfigHandler.Delete(ctx, in, out)
}

func (h *Config) Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error {
	return h.ConfigHandler.Search(ctx, in, out)
}

func (h *Config) Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error {
	return h.ConfigHandler.Read(ctx, in, out)
}

func (h *Config) ReadLog(ctx context.Context, in *ReadLogRequest, out *ReadLogResponse) error {
	return h.ConfigHandler.ReadLog(ctx, in, out)
}

var fileDescriptor0 = []byte{
	// 457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x93, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0xd7, 0xa6, 0x4b, 0xd5, 0xd3, 0x36, 0x1d, 0xb9, 0x59, 0x54, 0x6e, 0x50, 0x24, 0xc4,
	0x04, 0x9a, 0x2b, 0x95, 0x3f, 0x2f, 0x30, 0x6e, 0x40, 0x5c, 0x6d, 0xe2, 0x01, 0xbc, 0xd4, 0x49,
	0x2c, 0xd5, 0x71, 0x70, 0x5c, 0x5e, 0x84, 0x17, 0xe6, 0xe4, 0x38, 0x66, 0x49, 0x60, 0xa2, 0x57,
	0xad, 0x4f, 0x7e, 0xdf, 0xf9, 0xe2, 0xf3, 0x9d, 0xc0, 0xc7, 0x42, 0xda, 0xf2, 0xf4, 0xc8, 0x32,
	0xad, 0x76, 0x4a, 0x66, 0x46, 0xef, 0x32, 0x5d, 0xe5, 0xb2, 0xb8, 0x6d, 0xcc, 0xcf, 0x5d, 0x6d,
	0xb4, 0xf5, 0x85, 0xee, 0x87, 0x51, 0x6d, 0xfb, 0xe9, 0x2f, 0x59, 0xa1, 0x6f, 0xeb, 0x23, 0xb7,
	0xb9, 0x36, 0xca, 0x2b, 0xfa, 0x72, 0xa7, 0x4b, 0x35, 0x84, 0x77, 0x25, 0xaf, 0x0a, 0x11, 0x03,
	0x4c, 0xe5, 0x21, 0x99, 0xbc, 0x9a, 0xdc, 0x2c, 0xe2, 0x15, 0xcc, 0x6a, 0x6e, 0xcb, 0x64, 0x4a,
	0xa7, 0x08, 0x42, 0x7e, 0xb2, 0xa5, 0x36, 0x49, 0x40, 0xe7, 0x0d, 0xcc, 0xd1, 0x46, 0x89, 0xca,
	0x26, 0x33, 0x2a, 0xbc, 0x80, 0x85, 0x95, 0x4a, 0x34, 0x96, 0xab, 0x3a, 0xb9, 0xc4, 0x52, 0x10,
	0x5f, 0x43, 0xd0, 0x08, 0x9b, 0x84, 0x78, 0x58, 0xee, 0x81, 0x39, 0x8f, 0x07, 0x61, 0xd3, 0x0f,
	0xb0, 0x70, 0x87, 0x6f, 0xba, 0xa0, 0xce, 0x99, 0x95, 0xba, 0xea, 0x7c, 0xaf, 0x21, 0xcc, 0xe8,
	0x21, 0x39, 0x2f, 0xf7, 0xf3, 0x4e, 0x98, 0xde, 0xc0, 0xfa, 0xce, 0x08, 0x6e, 0xc5, 0xbd, 0xf8,
	0x71, 0x42, 0xa3, 0x1e, 0x39, 0x19, 0x92, 0x57, 0x10, 0x79, 0xb2, 0xa9, 0x75, 0xd5, 0x90, 0xf6,
	0x7b, 0x7d, 0x38, 0x53, 0xeb, 0xc9, 0x27, 0xed, 0x67, 0x71, 0x14, 0xe7, 0x69, 0x3d, 0xd9, 0x69,
	0xdf, 0xc0, 0xf2, 0x5e, 0xf0, 0x83, 0x57, 0x3e, 0x3b, 0x5f, 0x04, 0x57, 0x0e, 0x74, 0xc2, 0xe7,
	0x3d, 0xbe, 0xc2, 0xfa, 0x41, 0x70, 0x93, 0x95, 0xff, 0xea, 0xf9, 0x94, 0x92, 0x4b, 0x6d, 0x0d,
	0x97, 0x47, 0xa9, 0xa4, 0xa5, 0xd0, 0x82, 0xf6, 0xb1, 0xce, 0xf3, 0x36, 0x93, 0x36, 0xb3, 0x20,
	0x7d, 0x0b, 0x91, 0xef, 0xd5, 0xd9, 0x26, 0x18, 0x2b, 0xf9, 0x34, 0xd8, 0x31, 0xe8, 0xfb, 0x7e,
	0x81, 0xa8, 0x7d, 0x41, 0x4c, 0xcc, 0x1b, 0xe3, 0x05, 0x72, 0xa3, 0x15, 0x59, 0x07, 0xed, 0x6b,
	0x58, 0x4d, 0xb6, 0xc1, 0xff, 0x6c, 0x19, 0x6c, 0xfe, 0xb4, 0xea, 0x7c, 0x5f, 0x8e, 0x7d, 0xfd,
	0xba, 0x20, 0xb4, 0xff, 0x35, 0xc5, 0x05, 0xa5, 0x85, 0x8d, 0xdf, 0xe1, 0x3f, 0x4a, 0x36, 0x8e,
	0xd8, 0x60, 0x19, 0xb6, 0x1b, 0x36, 0x8a, 0xfc, 0xa2, 0x85, 0x5d, 0x94, 0x08, 0x0f, 0xd2, 0x47,
	0x78, 0x94, 0x31, 0xc1, 0x2e, 0x3b, 0x84, 0x07, 0x71, 0x23, 0x3c, 0x0a, 0x95, 0x60, 0x37, 0x38,
	0x84, 0x07, 0x69, 0x20, 0x3c, 0x9c, 0x28, 0xc2, 0xaf, 0x61, 0xd6, 0x5e, 0x37, 0x5e, 0xb1, 0xde,
	0x2a, 0x6c, 0xd7, 0xac, 0x9f, 0x37, 0x62, 0x0c, 0xe6, 0xdd, 0x54, 0xe2, 0x0d, 0x1b, 0x8e, 0x7a,
	0x7b, 0xc5, 0x46, 0x03, 0x4b, 0x2f, 0x1e, 0x43, 0xfa, 0x78, 0xdf, 0xff, 0x0e, 0x00, 0x00, 0xff,
	0xff, 0xde, 0x72, 0x5d, 0x2f, 0x2d, 0x04, 0x00, 0x00,
}
